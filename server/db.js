// server/db.js
import dotenv from "dotenv";
dotenv.config();

import { Sequelize } from "sequelize";
import mongoose from "mongoose";

const sequelize = new Sequelize(
  process.env.DB_NAME, // database name
  process.env.DB_USER, // username
  process.env.DB_PASSWORD, // password
  {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    dialect: "postgres",
    logging: false,
    // Do not set global underscored to avoid breaking existing tables.
  }
);

// PostgreSQL connection function
export const connectDB = async () => {
  try {
    await sequelize.authenticate();
    // Reconcile schema differences (safe for dev; use migrations for prod)
    await sequelize.sync({ alter: true });
    console.log("✅ PostgreSQL connected & synced");

    // Safety: ensure 'id' is auto-incrementing for critical tables (fix legacy schemas)
    await ensureIdentityForIdColumn("clients");
    await ensureIdentityForIdColumn("organizations");
    await ensureIdentityForIdColumn("roles");
    await ensureIdentityForIdColumn("user_organization_maps");
  } catch (error) {
    console.error("❌ PostgreSQL connection failed:", error);
    throw error;
  }
};

// Ensure a table has an appropriate default on the 'id' column (UUID or identity)
async function ensureIdentityForIdColumn(tableName) {
  try {
    const [rows] = await sequelize.query(
      `SELECT data_type, column_default FROM information_schema.columns WHERE table_schema = 'public' AND table_name = :t AND column_name = 'id'`,
      { replacements: { t: tableName } }
    );
    const row = Array.isArray(rows) ? rows[0] : rows;
    const dataType = row?.data_type;
    const defaultExpr = row?.column_default;
    if (defaultExpr) return; // Already has a default

    if (dataType === 'uuid') {
      // Ensure pgcrypto for gen_random_uuid()  
      try {
        await sequelize.query(`CREATE EXTENSION IF NOT EXISTS pgcrypto`);
      } catch (_) {}
      await sequelize.query(`ALTER TABLE "${tableName}" ALTER COLUMN id SET DEFAULT gen_random_uuid()`);
      console.log(`✅ Ensured UUID default on ${tableName}.id`);
      return;
    }

    // Integer-like PK: try identity, then fallback to sequence
    try {
      await sequelize.query(`ALTER TABLE "${tableName}" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY`);
      console.log(`✅ Ensured identity on ${tableName}.id`);
      return;
    } catch (_) {
      const seqName = `${tableName}_id_seq`;
      try {
        await sequelize.query(`DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = '${seqName}') THEN CREATE SEQUENCE ${seqName}; END IF; END $$;`);
      } catch (_) {}
      await sequelize.query(`ALTER TABLE "${tableName}" ALTER COLUMN id SET DEFAULT nextval('${seqName}')`);
      console.log(`✅ Ensured sequence default on ${tableName}.id`);
    }
  } catch (e) {
    console.warn(`⚠️ ensureIdentityForIdColumn failed for ${tableName}:`, e.message);
  }
}

// MongoDB connection function
export const connectMongoDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log("✅ MongoDB connected");
  } catch (error) {
    console.error("❌ MongoDB connection failed:", error);
    throw error;
  }
};

export default sequelize;
